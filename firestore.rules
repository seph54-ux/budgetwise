/**
 * @file Firestore Security Rules for BudgetWise Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, where each user has exclusive access to their own data, stored under their unique user ID.
 * @data_structure All data is nested under the `/users/{userId}` path, creating a hierarchical structure that simplifies authorization. This includes transactions, categories, budgets, and savings goals.
 * @key_security_decisions
 *   - User listing is disallowed to protect user privacy.
 *   - All write operations require authentication and ownership validation.
 *   - The rules are designed to be easily auditable and maintainable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read or write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete) Authenticated user with matching userId.
     * @deny (get, create, update, delete) Unauthenticated user or authenticated user with mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user transactions. Only the authenticated user can read or write their own transactions.
     * @path /databases/{database}/documents/users/{userId}/transactions/{transactionId}
     * @allow (get, create, update, delete) Authenticated user with matching userId.
     * @deny (get, create, update, delete) Unauthenticated user or authenticated user with mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user categories. Only the authenticated user can read or write their own categories.
     * @path /databases/{database}/documents/users/{userId}/categories/{categoryId}
     * @allow (get, create, update, delete) Authenticated user with matching userId.
     * @deny (get, create, update, delete) Unauthenticated user or authenticated user with mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user budgets. Only the authenticated user can read or write their own budgets.
     * @path /databases/{database}/documents/users/{userId}/budgets/{budgetId}
     * @allow (get, create, update, delete) Authenticated user with matching userId.
     * @deny (get, create, update, delete) Unauthenticated user or authenticated user with mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user savings goals. Only the authenticated user can read or write their own savings goals.
     * @path /databases/{database}/documents/users/{userId}/savingsGoals/{goalId}
     * @allow (get, create, update, delete) Authenticated user with matching userId.
     * @deny (get, create, update, delete) Unauthenticated user or authenticated user with mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/savingsGoals/{goalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user savings transactions. Only the authenticated user can read or write their own savings transactions.
     * @path /databases/{database}/documents/users/{userId}/savingsTransactions/{transactionId}
     * @allow (get, create, update, delete) Authenticated user with matching userId.
     * @deny (get, create, update, delete) Unauthenticated user or authenticated user with mismatched userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/savingsTransactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}