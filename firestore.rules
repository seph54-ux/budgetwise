/**
 * @fileOverview Firestore Security Rules for BudgetWise.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model, where each user has exclusive access to their own profile and associated data (categories, transactions, budgets).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/categories/{categoryId}: Stores categories owned by a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions owned by a specific user.
 * - /users/{userId}/budgets/{budgetId}: Stores budget goals owned by a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - No public data or shared access is allowed.
 * - Data ownership is enforced through the `userId` field in documents and path-based rules.
 * - Listing of user data is allowed only for the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles, ensuring only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' can read/write their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (get, update, delete) User with ID 'user456' cannot read/write the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create the profile of user 'user123'.
     * @principle Enforces document ownership for writes.  Allows self-creation.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for categories, ensuring only the owning user can manage their categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (get, list, create, update, delete) User with ID 'user123' can manage their own categories.
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot manage categories belonging to user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces access control for transactions, ensuring only the owning user can manage their transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete) User with ID 'user123' can manage their own transactions.
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot manage transactions belonging to user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces access control for budgets, ensuring only the owning user can manage their budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (get, list, create, update, delete) User with ID 'user123' can manage their own budgets.
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot manage budgets belonging to user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }
  }
}