/**
 * @fileOverview Firestore Security Rules for BudgetWise Application
 *
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - All data is nested under /users/{userId}, creating a clear hierarchy of ownership.
 * - User profiles are stored at /users/{userId}.
 * - Expenses, Categories, and Budgets are stored as subcollections under each user's document.
 *
 * Key Security Decisions:
 * - Listing of all users is explicitly disallowed.
 * - All write operations require authentication.
 * - Data consistency between document IDs and path parameters is enforced on creation and updates.
 *
 * Denormalization for Authorization:
 * - The 'userId' is included in documents within the /users/{userId} tree to confirm ownership on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile when authenticated as 'user123'.
     * @allow (get, update, delete) User 'user123' can read/update/delete their profile when authenticated as 'user123'.
     * @deny (create, get, update, delete) User 'user456' cannot access 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile if the userId matches their auth ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow read access if the user is the owner.
      allow get: if isOwner(userId);

      // Allow list access if the user is the owner. Listing users is not permitted.
      allow list: if false;

      // Allow update if the user is the owner and the userId in the resource data matches the userId in the path.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;

      // Allow delete if the user is the owner.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures expenses for each user. Only the authenticated user can read or write their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' can create an expense when authenticated as 'user123'.
     * @allow (get, update, delete) User 'user123' can read/update/delete their expense with ID 'expense456' when authenticated as 'user123'.
     * @deny (create, get, update, delete) User 'user456' cannot access expenses under 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow create if the user is the owner and the userId in the resource data matches the userId in the path.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow read access if the user is the owner.
      allow get: if isOwner(userId);

      // Allow list access if the user is the owner.
      allow list: if isOwner(userId);

      // Allow update if the user is the owner and the userId in the resource data matches the userId in the path.
      allow update: if isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;

      // Allow delete if the user is the owner.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures categories for each user. Only the authenticated user can read or write their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with ID 'user123' can create a category when authenticated as 'user123'.
     * @allow (get, update, delete) User 'user123' can read/update/delete their category with ID 'category456' when authenticated as 'user123'.
     * @deny (create, get, update, delete) User 'user456' cannot access categories under 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow create if the user is the owner and the userId in the resource data matches the userId in the path.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow read access if the user is the owner.
      allow get: if isOwner(userId);

      // Allow list access if the user is the owner.
      allow list: if isOwner(userId);

      // Allow update if the user is the owner and the userId in the resource data matches the userId in the path.
      allow update: if isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;

      // Allow delete if the user is the owner.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures budgets for each user. Only the authenticated user can read or write their own budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with ID 'user123' can create a budget when authenticated as 'user123'.
     * @allow (get, update, delete) User 'user123' can read/update/delete their budget with ID 'budget456' when authenticated as 'user123'.
     * @deny (create, get, update, delete) User 'user456' cannot access budgets under 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow create if the user is the owner and the userId in the resource data matches the userId in the path.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow read access if the user is the owner.
      allow get: if isOwner(userId);

      // Allow list access if the user is the owner.
      allow list: if isOwner(userId);

      // Allow update if the user is the owner and the userId in the resource data matches the userId in the path.
      allow update: if isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;

      // Allow delete if the user is the owner.
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}