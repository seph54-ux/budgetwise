{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the BudgetWise application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "Full name of the user."
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a spending category.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category (e.g., Food, Transport)."
        },
        "color": {
          "type": "string",
          "description": "Color associated with the category (e.g., #3F51B5)."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the category. (Relationship: User 1:N Category)"
        }
      },
      "required": [
        "id",
        "name",
        "color",
        "userId"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a financial transaction (income or expense).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transaction."
        },
        "date": {
          "type": "string",
          "description": "Date of the transaction.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction (positive for income, negative for expense)."
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to the Category of the transaction. (Relationship: Category 1:N Transaction)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who owns the transaction. (Relationship: User 1:N Transaction)"
        },
        "type": {
          "type": "string",
          "description": "Type of transaction - Income or Expense"
        },
        "notes": {
          "type": "string",
          "description": "Any additional notes the user wants to add to the transactions. can be null if empty."
        }
      },
      "required": [
        "id",
        "date",
        "amount",
        "categoryId",
        "userId",
        "type"
      ]
    },
    "Budget": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Budget",
      "type": "object",
      "description": "Represents a monthly budget goal for a specific category.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the budget."
        },
        "month": {
          "type": "string",
          "description": "The month that the budget is for. (Format: YYYY-MM)",
          "format": "date-time"
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to the Category the budget applies to. (Relationship: Category 1:N Budget)"
        },
        "goal": {
          "type": "number",
          "description": "The budget goal amount for the month."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the budget. (Relationship: User 1:N Budget)"
        }
      },
      "required": [
        "id",
        "month",
        "categoryId",
        "goal",
        "userId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Collection for storing user profiles. Only the user can read/write their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Collection for storing categories, owned by the user. The userId is included to enforce ownership and achieve Authorization Independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "categoryId",
              "description": "The unique identifier of the category."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Collection for storing transactions, owned by the user. The userId is included to enforce ownership and achieve Authorization Independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier of the transaction."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/budgets/{budgetId}",
        "definition": {
          "entityName": "Budget",
          "schema": {
            "$ref": "#/backend/entities/Budget"
          },
          "description": "Collection for storing budgets, owned by the user. The userId is included to enforce ownership and achieve Authorization Independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "budgetId",
              "description": "The unique identifier of the budget."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, following the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It leverages structural segregation and denormalization to avoid complex security rules and `get()` calls.\n\n**Authorization Independence:**\nAuthorization independence is achieved by utilizing path-based ownership for user-specific data. The `userId` is embedded in each collection path (`/users/{userId}/categories`, `/users/{userId}/transactions`, `/users/{userId}/budgets`). This eliminates the need for `get()` calls to verify ownership, ensuring that all authorization can be performed directly on the requested document.\n\n**Structural Segregation:**\nEach top-level collection is dedicated to a specific entity type (`categories`, `transactions`, `budgets`), ensuring homogeneous security postures within each collection. Each entity is nested under the `users/{userId}` collection to denote ownership, thereby simplifying security rules based on the `request.auth.uid`.\n\n**Access Modeling:**\n- **Private Data:** Path-based ownership is implemented for user-specific data like categories, transactions, and budgets, using the `/users/{userId}/{entity}` pattern.\n\n**QAPs Support:**\nThe structure supports secure `list` operations because authorization rules can be applied directly to each collection without needing to filter based on data within the documents.\n\n**Invariants:**\nThe structure supports the integrity of ownership by embedding the `userId` directly in the document path, making it straightforward to enforce ownership constraints in security rules."
  }
}